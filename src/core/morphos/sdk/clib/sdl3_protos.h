#ifndef CLIB_SDL3_PROTOS_H
#define CLIB_SDL3_PROTOS_H
/*
 * Collection of SDL 3 functions.
 */
#ifndef _SDL_H
#include <SDL.h>
#endif
struct Library;
void SDL_InitTGL(void **glc, struct Library **tgl, unsigned int (*getmaximumcontextversion)(struct Library *TinyGLBase));
void SDL_SetExitPointer(void (*exitfunc)(int));
int SDL_VSetError(const char *fmt, va_list ap);
#if 0
SDL_Surface * SDL_AcquireCameraFrame(SDL_Camera *camera, Uint64 *timestampNS);
int SDL_AddAtomicInt(SDL_AtomicInt *a, int v);
bool SDL_AddEventWatch(SDL_EventFilter filter, void *userdata);
int SDL_AddGamepadMapping(const char *mapping);
int SDL_AddGamepadMappingsFromFile(const char *file);
int SDL_AddGamepadMappingsFromIO(SDL_IOStream *src, bool closeio);
bool SDL_AddHintCallback(const char *name, SDL_HintCallback callback, void *userdata);
bool SDL_AddSurfaceAlternateImage(SDL_Surface *surface, SDL_Surface *image);
SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *userdata);
SDL_TimerID SDL_AddTimerNS(Uint64 interval, SDL_NSTimerCallback callback, void *userdata);
SDL_JoystickID SDL_AttachVirtualJoystick(const SDL_VirtualJoystickDesc *desc);
bool SDL_AudioDevicePaused(SDL_AudioDeviceID dev);
bool SDL_BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream *stream);
bool SDL_BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream * const *streams, int num_streams);
bool SDL_BlitSurface9Grid(SDL_Surface *src, const SDL_Rect *srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);
bool SDL_BlitSurface(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
bool SDL_BlitSurfaceScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);
bool SDL_BlitSurfaceTiled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
bool SDL_BlitSurfaceTiledWithScale(SDL_Surface *src, const SDL_Rect *srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);
bool SDL_BlitSurfaceUnchecked(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);
bool SDL_BlitSurfaceUncheckedScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);
void SDL_BroadcastCondition(SDL_Condition *cond);
bool SDL_CaptureMouse(bool enabled);
void SDL_CleanupTLS(void);
bool SDL_ClearAudioStream(SDL_AudioStream *stream);
bool SDL_ClearClipboardData(void);
bool SDL_ClearComposition(SDL_Window *window);
bool SDL_ClearError(void);
bool SDL_ClearProperty(SDL_PropertiesID props, const char *name);
bool SDL_ClearSurface(SDL_Surface *surface, float r, float g, float b, float a);
void SDL_CloseAudioDevice(SDL_AudioDeviceID devid);
void SDL_CloseCamera(SDL_Camera *camera);
void SDL_CloseGamepad(SDL_Gamepad *gamepad);
void SDL_CloseHaptic(SDL_Haptic *haptic);
bool SDL_CloseIO(SDL_IOStream *context);
void SDL_CloseJoystick(SDL_Joystick *joystick);
void SDL_CloseSensor(SDL_Sensor *sensor);
bool SDL_CloseStorage(SDL_Storage *storage);
bool SDL_CompareAndSwapAtomicInt(SDL_AtomicInt *a, int oldval, int newval);
bool SDL_CompareAndSwapAtomicPointer(void **a, void *oldval, void *newval);
bool SDL_CompareAndSwapAtomicU32(SDL_AtomicU32 *a, Uint32 oldval, Uint32 newval);
SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);
bool SDL_ConvertAudioSamples(const SDL_AudioSpec *src_spec, const Uint8 *src_data, int src_len, const SDL_AudioSpec *dst_spec, Uint8 **dst_data, int *dst_len);
bool SDL_ConvertEventToRenderCoordinates(SDL_Renderer *renderer, SDL_Event *event);
bool SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch);
bool SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, const void *src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, void *dst, int dst_pitch);
SDL_Surface * SDL_ConvertSurface(SDL_Surface *surface, SDL_PixelFormat format);
SDL_Surface * SDL_ConvertSurfaceAndColorspace(SDL_Surface *surface, SDL_PixelFormat format, SDL_Palette *palette, SDL_Colorspace colorspace, SDL_PropertiesID props);
bool SDL_CopyFile(const char *oldpath, const char *newpath);
bool SDL_CopyProperties(SDL_PropertiesID src, SDL_PropertiesID dst);
bool SDL_CopyStorageFile(SDL_Storage *storage, const char *oldpath, const char *newpath);
SDL_AudioStream * SDL_CreateAudioStream(const SDL_AudioSpec *src_spec, const SDL_AudioSpec *dst_spec);
SDL_Cursor * SDL_CreateColorCursor(SDL_Surface *surface, int hot_x, int hot_y);
SDL_Condition * SDL_CreateCondition(void);
SDL_Cursor * SDL_CreateCursor(const Uint8 * data, const Uint8 * mask, int w, int h, int hot_x, int hot_y);
bool SDL_CreateDirectory(const char *path);
SDL_Environment * SDL_CreateEnvironment(bool populated);
int SDL_CreateHapticEffect(SDL_Haptic *haptic, const SDL_HapticEffect *effect);
SDL_Mutex * SDL_CreateMutex(void);
SDL_Palette * SDL_CreatePalette(int ncolors);
SDL_Window * SDL_CreatePopupWindow(SDL_Window *parent, int offset_x, int offset_y, int w, int h, SDL_WindowFlags flags);
SDL_Process * SDL_CreateProcess(const char * const *args, bool pipe_stdio);
SDL_Process * SDL_CreateProcessWithProperties(SDL_PropertiesID props);
SDL_PropertiesID SDL_CreateProperties(void);
SDL_RWLock * SDL_CreateRWLock(void);
SDL_Renderer * SDL_CreateRenderer(SDL_Window *window, const char *name);
SDL_Renderer * SDL_CreateRendererWithProperties(SDL_PropertiesID props);
SDL_Semaphore * SDL_CreateSemaphore(Uint32 initial_value);
SDL_Renderer * SDL_CreateSoftwareRenderer(SDL_Surface *surface);
bool SDL_CreateStorageDirectory(SDL_Storage *storage, const char *path);
SDL_Surface * SDL_CreateSurface(int width, int height, SDL_PixelFormat format);
SDL_Surface * SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, void *pixels, int pitch);
SDL_Palette * SDL_CreateSurfacePalette(SDL_Surface *surface);
SDL_Cursor * SDL_CreateSystemCursor(SDL_SystemCursor id);
SDL_Texture * SDL_CreateTexture(SDL_Renderer *renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);
SDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer *renderer, SDL_Surface *surface);
SDL_Texture * SDL_CreateTextureWithProperties(SDL_Renderer *renderer, SDL_PropertiesID props);
SDL_Thread * SDL_CreateThreadRuntime(SDL_ThreadFunction fn, const char *name, void *data, SDL_FunctionPointer pfnBeginThread, SDL_FunctionPointer pfnEndThread);
SDL_Thread * SDL_CreateThreadWithPropertiesRuntime(SDL_PropertiesID props, SDL_FunctionPointer pfnBeginThread, SDL_FunctionPointer pfnEndThread);
SDL_Window * SDL_CreateWindow(const char *title, int w, int h, SDL_WindowFlags flags);
bool SDL_CreateWindowAndRenderer(const char *title, int width, int height, SDL_WindowFlags window_flags, SDL_Window **window, SDL_Renderer **renderer);
SDL_Window * SDL_CreateWindowWithProperties(SDL_PropertiesID props);
bool SDL_CursorVisible(void);
bool SDL_DateTimeToTime(const SDL_DateTime *dt, SDL_Time *ticks);
void SDL_Delay(Uint32 ms);
void SDL_DelayNS(Uint64 ns);
void SDL_DestroyAudioStream(SDL_AudioStream *stream);
void SDL_DestroyCondition(SDL_Condition *cond);
void SDL_DestroyCursor(SDL_Cursor *cursor);
void SDL_DestroyEnvironment(SDL_Environment *env);
void SDL_DestroyHapticEffect(SDL_Haptic *haptic, int effect);
void SDL_DestroyMutex(SDL_Mutex *mutex);
void SDL_DestroyPalette(SDL_Palette *palette);
void SDL_DestroyProcess(SDL_Process *process);
void SDL_DestroyProperties(SDL_PropertiesID props);
void SDL_DestroyRWLock(SDL_RWLock *rwlock);
void SDL_DestroyRenderer(SDL_Renderer *renderer);
void SDL_DestroySemaphore(SDL_Semaphore *sem);
void SDL_DestroySurface(SDL_Surface *surface);
void SDL_DestroyTexture(SDL_Texture *texture);
void SDL_DestroyWindow(SDL_Window *window);
bool SDL_DestroyWindowSurface(SDL_Window *window);
void SDL_DetachThread(SDL_Thread *thread);
bool SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);
bool SDL_DisableScreenSaver(void);
SDL_Surface * SDL_DuplicateSurface(SDL_Surface *surface);
bool SDL_EnableScreenSaver(void);
int SDL_EnterAppMainCallbacks(int argc, char *argv[], SDL_AppInit_func appinit, SDL_AppIterate_func appiter, SDL_AppEvent_func appevent, SDL_AppQuit_func appquit);
bool SDL_EnumerateDirectory(const char *path, SDL_EnumerateDirectoryCallback callback, void *userdata);
bool SDL_EnumerateProperties(SDL_PropertiesID props, SDL_EnumeratePropertiesCallback callback, void *userdata);
bool SDL_EnumerateStorageDirectory(SDL_Storage *storage, const char *path, SDL_EnumerateDirectoryCallback callback, void *userdata);
bool SDL_EventEnabled(Uint32 type);
bool SDL_FillSurfaceRect(SDL_Surface *dst, const SDL_Rect *rect, Uint32 color);
bool SDL_FillSurfaceRects(SDL_Surface *dst, const SDL_Rect *rects, int count, Uint32 color);
void SDL_FilterEvents(SDL_EventFilter filter, void *userdata);
bool SDL_FlashWindow(SDL_Window *window, SDL_FlashOperation operation);
bool SDL_FlipSurface(SDL_Surface *surface, SDL_FlipMode flip);
bool SDL_FlushAudioStream(SDL_AudioStream *stream);
void SDL_FlushEvent(Uint32 type);
void SDL_FlushEvents(Uint32 minType, Uint32 maxType);
bool SDL_FlushIO(SDL_IOStream *context);
bool SDL_FlushRenderer(SDL_Renderer *renderer);
SDL_GLContext SDL_GL_CreateContext(SDL_Window *window);
bool SDL_GL_DestroyContext(SDL_GLContext context);
bool SDL_GL_ExtensionSupported(const char *extension);
bool SDL_GL_GetAttribute(SDL_GLAttr attr, int *value);
SDL_GLContext SDL_GL_GetCurrentContext(void);
SDL_Window * SDL_GL_GetCurrentWindow(void);
bool SDL_GL_GetSwapInterval(int *interval);
bool SDL_GL_LoadLibrary(const char *path);
bool SDL_GL_MakeCurrent(SDL_Window *window, SDL_GLContext context);
void SDL_GL_ResetAttributes(void);
bool SDL_GL_SetAttribute(SDL_GLAttr attr, int value);
bool SDL_GL_SetSwapInterval(int interval);
bool SDL_GL_SwapWindow(SDL_Window *window);
void SDL_GL_UnloadLibrary(void);
void SDL_GUIDToString(SDL_GUID guid, char *pszGUID, int cbGUID);
bool SDL_GamepadConnected(SDL_Gamepad *gamepad);
bool SDL_GamepadEventsEnabled(void);
bool SDL_GamepadHasAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);
bool SDL_GamepadHasButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);
bool SDL_GamepadHasSensor(SDL_Gamepad *gamepad, SDL_SensorType type);
bool SDL_GamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type);
const char * SDL_GetAppMetadataProperty(const char *name);
SDL_AssertionHandler SDL_GetAssertionHandler(void **puserdata);
const SDL_AssertData * SDL_GetAssertionReport(void);
int SDL_GetAtomicInt(SDL_AtomicInt *a);
void * SDL_GetAtomicPointer(void **a);
Uint32 SDL_GetAtomicU32(SDL_AtomicU32 *a);
int * SDL_GetAudioDeviceChannelMap(SDL_AudioDeviceID devid, int *count);
bool SDL_GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec *spec, int *sample_frames);
float SDL_GetAudioDeviceGain(SDL_AudioDeviceID devid);
const char * SDL_GetAudioDeviceName(SDL_AudioDeviceID devid);
const char * SDL_GetAudioDriver(int index);
const char * SDL_GetAudioFormatName(SDL_AudioFormat format);
SDL_AudioDeviceID * SDL_GetAudioPlaybackDevices(int *count);
SDL_AudioDeviceID * SDL_GetAudioRecordingDevices(int *count);
int SDL_GetAudioStreamAvailable(SDL_AudioStream *stream);
int SDL_GetAudioStreamData(SDL_AudioStream *stream, void *buf, int len);
SDL_AudioDeviceID SDL_GetAudioStreamDevice(SDL_AudioStream *stream);
SDL_AudioStream* SDL_GetAudioStreamFormat(SDL_AudioStream* stream, SDL_AudioFormat* format);
int SDL_GetAudioStreamFrequencyRatio(SDL_AudioStream* stream, float* ratio);
int SDL_GetAudioStreamGain(SDL_AudioStream* stream, float* gain);
int SDL_GetAudioStreamInputChannelMap(SDL_AudioStream* stream, int* map, int channels);
int SDL_GetAudioStreamOutputChannelMap(SDL_AudioStream* stream, int* map, int channels);
int SDL_GetAudioStreamProperties(SDL_AudioStream* stream, SDL_AudioSpec* spec);
int SDL_GetAudioStreamQueued(SDL_AudioStream* stream);
char* SDL_GetBasePath(void);
SDL_bool SDL_GetBooleanProperty(const char* name, SDL_bool default_value);
int SDL_GetCPUCacheLineSize(void);
const char* SDL_GetCameraDriver(int index);
Uint32 SDL_GetCameraFormat(SDL_Camera* camera);
const char* SDL_GetCameraID(SDL_Camera* camera);
const char* SDL_GetCameraName(SDL_Camera* camera);
SDL_CameraPermissionState SDL_GetCameraPermissionState(SDL_Camera* camera);
SDL_CameraPosition SDL_GetCameraPosition(SDL_Camera* camera);
int SDL_GetCameraProperties(SDL_Camera* camera, SDL_CameraProperties* properties);
int SDL_GetCameraSupportedFormats(SDL_Camera* camera, Uint32* formats, int max_formats);
int SDL_GetCameras(SDL_Camera** cameras, int max_cameras);
void* SDL_GetClipboardData(const char* mime_type, size_t* size);
char** SDL_GetClipboardMimeTypes(int* count);
char* SDL_GetClipboardText(void);
int SDL_GetClosestFullscreenDisplayMode(SDL_Window* window, const SDL_DisplayMode* mode, SDL_DisplayMode* closest);
const char* SDL_GetCurrentAudioDriver(void);
const char* SDL_GetCurrentCameraDriver(void);
int SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode* mode);
SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(int displayIndex);
int SDL_GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);
SDL_threadID SDL_GetCurrentThreadID(void);
Uint64 SDL_GetCurrentTime(void);
const char* SDL_GetCurrentVideoDriver(void);
SDL_Cursor* SDL_GetCursor(void);
char** SDL_GetDateTimeLocalePreferences(int* count);
SDL_DayOfWeek SDL_GetDayOfWeek(int year, int month, int day);
int SDL_GetDayOfYear(int year, int month, int day);
int SDL_GetDaysInMonth(int year, int month);
SDL_AssertionHandler SDL_GetDefaultAssertionHandler(void);
SDL_Cursor* SDL_GetDefaultCursor(void);
int SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode* mode);
int SDL_GetDisplayBounds(int displayIndex, SDL_Rect* rect);
float SDL_GetDisplayContentScale(int displayIndex);
int SDL_GetDisplayForPoint(const SDL_Point* point);
int SDL_GetDisplayForRect(const SDL_Rect* rect);
int SDL_GetDisplayForWindow(SDL_Window* window);
const char* SDL_GetDisplayName(int displayIndex);
int SDL_GetDisplayProperties(int displayIndex, SDL_DisplayProperties* properties);
int SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect* rect);
int SDL_GetDisplays(int* count);
char** SDL_GetEnvironment(int* count);
const char* SDL_GetEnvironmentVariable(const char* name);
char** SDL_GetEnvironmentVariables(int* count);
const char * SDL_GetError(void);
SDL_EventFilter SDL_GetEventFilter(void* userdata);
float SDL_GetFloatProperty(const char* name, float default_value);
int SDL_GetFullscreenDisplayModes(int displayIndex, SDL_DisplayMode* modes, int max_modes);
const char* SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);
const char* SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);
Sint16 SDL_GetGamepadAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);
SDL_GamepadAxis SDL_GetGamepadAxisFromString(const char* str);
int SDL_GetGamepadBindings(SDL_Gamepad* gamepad, SDL_GamepadBinding* bindings, int max_bindings);
Uint8 SDL_GetGamepadButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);
SDL_GamepadButton SDL_GetGamepadButtonFromString(const char* str);
const char* SDL_GetGamepadButtonLabel(SDL_Gamepad* gamepad, SDL_GamepadButton button);
const char* SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);
SDL_GamepadConnectionState SDL_GetGamepadConnectionState(SDL_Gamepad* gamepad);
Uint16 SDL_GetGamepadFirmwareVersion(SDL_Gamepad* gamepad);
SDL_Gamepad* SDL_GetGamepadFromID(SDL_JoystickID id);
SDL_Gamepad* SDL_GetGamepadFromPlayerIndex(int player_index);
SDL_JoystickGUID SDL_GetGamepadGUIDForID(SDL_JoystickID id);
SDL_JoystickID SDL_GetGamepadID(SDL_Gamepad* gamepad);
SDL_Joystick* SDL_GetGamepadJoystick(SDL_Gamepad* gamepad);
const char* SDL_GetGamepadMapping(SDL_Gamepad* gamepad);
const char* SDL_GetGamepadMappingForGUID(SDL_JoystickGUID guid);
const char* SDL_GetGamepadMappingForID(SDL_JoystickID id);
int SDL_GetGamepadMappings(char** mappings, int max_mappings);
const char* SDL_GetGamepadName(SDL_Gamepad* gamepad);
const char* SDL_GetGamepadNameForID(SDL_JoystickID id);
const char* SDL_GetGamepadPath(SDL_Gamepad* gamepad);
const char* SDL_GetGamepadPathForID(SDL_JoystickID id);
int SDL_GetGamepadPlayerIndex(SDL_Gamepad* gamepad);
int SDL_GetGamepadPlayerIndexForID(SDL_JoystickID id);
SDL_BatteryInfo SDL_GetGamepadPowerInfo(SDL_Gamepad* gamepad);
Uint16 SDL_GetGamepadProduct(SDL_Gamepad* gamepad);
Uint16 SDL_GetGamepadProductForID(SDL_JoystickID id);
Uint16 SDL_GetGamepadProductVersion(SDL_Gamepad* gamepad);
Uint16 SDL_GetGamepadProductVersionForID(SDL_JoystickID id);
int SDL_GetGamepadProperties(SDL_Gamepad* gamepad, SDL_GamepadProperties* properties);
int SDL_GetGamepadSensorData(SDL_Gamepad* gamepad, SDL_SensorType type, float* data, int num_values);
float SDL_GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SDL_SensorType type);
const char* SDL_GetGamepadSerial(SDL_Gamepad* gamepad);
SDL_SteamHandle SDL_GetGamepadSteamHandle(SDL_Gamepad* gamepad);
const char* SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);
const char* SDL_GetGamepadStringForButton(SDL_GamepadButton button);
const char* SDL_GetGamepadStringForType(SDL_GamepadType type);
int SDL_GetGamepadTouchpadFinger(SDL_Gamepad* gamepad, int touchpad, int finger, SDL_Finger* data);
SDL_GamepadType SDL_GetGamepadType(SDL_Gamepad* gamepad);
SDL_GamepadType SDL_GetGamepadTypeForID(SDL_JoystickID id);
SDL_GamepadType SDL_GetGamepadTypeFromString(const char* str);
Uint16 SDL_GetGamepadVendor(SDL_Gamepad* gamepad);
Uint16 SDL_GetGamepadVendorForID(SDL_JoystickID id);
int SDL_GetGamepads(SDL_Gamepad** gamepads, int max_gamepads);
Uint32 SDL_GetGlobalMouseState(int* x, int* y);
int SDL_GetGlobalProperties(SDL_GlobalProperties* properties);
SDL_Window* SDL_GetGrabbedWindow(void);
int SDL_GetHapticEffectStatus(SDL_Haptic* haptic, SDL_HapticEffect effect);
int SDL_GetHapticFeatures(SDL_Haptic* haptic, Uint32* features, int max_features);
SDL_Haptic* SDL_GetHapticFromID(SDL_HapticID id);
SDL_HapticID SDL_GetHapticID(SDL_Haptic* haptic);
const char* SDL_GetHapticName(SDL_Haptic* haptic);
const char* SDL_GetHapticNameForID(SDL_HapticID id);
int SDL_GetHaptics(SDL_Haptic** haptics, int max_haptics);
const char* SDL_GetHint(const char* name);
SDL_bool SDL_GetHintBoolean(const char* name, SDL_bool default_value);
int SDL_GetIOProperties(SDL_IO* io, SDL_IOProperties* properties);
int SDL_GetIOSize(SDL_IO* io);
SDL_IOStatus SDL_GetIOStatus(SDL_IO* io);
Sint16 SDL_GetJoystickAxis(SDL_Joystick* joystick, int axis);
SDL_bool SDL_GetJoystickAxisInitialState(SDL_Joystick* joystick, int axis, Sint16* state);
int SDL_GetJoystickBall(SDL_Joystick* joystick, int ball, int* dx, int* dy);
Uint8 SDL_GetJoystickButton(SDL_Joystick* joystick, int button);
SDL_JoystickConnectionState SDL_GetJoystickConnectionState(SDL_Joystick* joystick);
Uint16 SDL_GetJoystickFirmwareVersion(SDL_Joystick* joystick);
SDL_Joystick* SDL_GetJoystickFromID(SDL_JoystickID id);
SDL_Joystick* SDL_GetJoystickFromPlayerIndex(int player_index);
SDL_JoystickGUID SDL_GetJoystickGUID(SDL_Joystick* joystick);
SDL_JoystickGUID SDL_GetJoystickGUIDForID(SDL_JoystickID id);
void SDL_GetJoystickGUIDInfo(SDL_JoystickGUID guid, Uint16* vendor, Uint16* product, Uint16* version, Uint16* type);
Uint8 SDL_GetJoystickHat(SDL_Joystick* joystick, int hat);
SDL_JoystickID SDL_GetJoystickID(SDL_Joystick* joystick);
const char* SDL_GetJoystickName(SDL_Joystick* joystick);
const char* SDL_GetJoystickNameForID(SDL_JoystickID id);
const char* SDL_GetJoystickPath(SDL_Joystick* joystick);
const char* SDL_GetJoystickPathForID(SDL_JoystickID id);
int SDL_GetJoystickPlayerIndex(SDL_Joystick* joystick);
int SDL_GetJoystickPlayerIndexForID(SDL_JoystickID id);
SDL_BatteryInfo SDL_GetJoystickPowerInfo(SDL_Joystick* joystick);
Uint16 SDL_GetJoystickProduct(SDL_Joystick* joystick);
Uint16 SDL_GetJoystickProductForID(SDL_JoystickID id);
Uint16 SDL_GetJoystickProductVersion(SDL_Joystick* joystick);
Uint16 SDL_GetJoystickProductVersionForID(SDL_JoystickID id);
int SDL_GetJoystickProperties(SDL_Joystick* joystick, SDL_JoystickProperties* properties);
const char* SDL_GetJoystickSerial(SDL_Joystick* joystick);
SDL_JoystickType SDL_GetJoystickType(SDL_Joystick* joystick);
SDL_JoystickType SDL_GetJoystickTypeForID(SDL_JoystickID id);
Uint16 SDL_GetJoystickVendor(SDL_Joystick* joystick);
Uint16 SDL_GetJoystickVendorForID(SDL_JoystickID id);
int SDL_GetJoysticks(SDL_Joystick** joysticks, int max_joysticks);
SDL_Keycode SDL_GetKeyFromName(const char* name);
SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);
const char* SDL_GetKeyName(SDL_Keycode key);
SDL_Window* SDL_GetKeyboardFocus(void);
const char* SDL_GetKeyboardNameForID(SDL_JoystickID id);
const Uint8* SDL_GetKeyboardState(int* numkeys);
int SDL_GetKeyboards(SDL_KeyboardID* keyboards, int count);
void SDL_GetLogOutputFunction(SDL_LogOutputFunction* callback, void** userdata);
SDL_LogPriority SDL_GetLogPriority(int category);
int SDL_GetMasksForPixelFormat(Uint32 format, int* bpp, Uint32* Rmask, Uint32* Gmask, Uint32* Bmask, Uint32* Amask);
int SDL_GetMaxHapticEffects(SDL_Haptic* haptic);
int SDL_GetMaxHapticEffectsPlaying(SDL_Haptic* haptic);
void SDL_GetMemoryFunctions(void** malloc_func, void** calloc_func, void** realloc_func, void** free_func);
int SDL_GetMice(SDL_MouseID* mice, int count);
SDL_Keymod SDL_GetModState(void);
SDL_Window* SDL_GetMouseFocus(void);
const char* SDL_GetMouseNameForID(SDL_MouseID id);
Uint32 SDL_GetMouseState(int* x, int* y);
SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(SDL_DisplayID display);
size_t SDL_GetNumAllocations(void);
int SDL_GetNumAudioDrivers(void);
int SDL_GetNumCameraDrivers(void);
int SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad);
int SDL_GetNumGamepadTouchpads(SDL_Gamepad* gamepad);
int SDL_GetNumHapticAxes(SDL_Haptic* haptic);
int SDL_GetNumJoystickAxes(SDL_Joystick* joystick);
int SDL_GetNumJoystickBalls(SDL_Joystick* joystick);
int SDL_GetNumJoystickButtons(SDL_Joystick* joystick);
int SDL_GetNumJoystickHats(SDL_Joystick* joystick);
int SDL_GetNumLogicalCPUCores(void);
int SDL_GetNumRenderDrivers(void);
int SDL_GetNumVideoDrivers(void);
double SDL_GetNumberProperty(const char* name, double default_value);
void SDL_GetOriginalMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func);
int SDL_GetPathInfo(const char* path, SDL_PathInfo* info);
Uint64 SDL_GetPerformanceCounter(void);
Uint64 SDL_GetPerformanceFrequency(void);
SDL_PixelFormatDetails* SDL_GetPixelFormatDetails(Uint32 format);
Uint32 SDL_GetPixelFormatForMasks(int bpp, Uint32 rmask, Uint32 gmask, Uint32 bmask, Uint32 amask);
const char* SDL_GetPixelFormatName(Uint32 format);
const char* SDL_GetPlatform(void);
void* SDL_GetPointerProperty(const char* name, void* default_value);
SDL_PowerState SDL_GetPowerInfo(int* seconds, int* percent);
char* SDL_GetPrefPath(const char* org, const char* app);
const SDL_Locale* SDL_GetPreferredLocales(void);
int SDL_GetPrimaryDisplay(void);
char* SDL_GetPrimarySelectionText(void);
int SDL_GetProcessInput(SDL_ProcessHandle handle, void* buffer, size_t size);
int SDL_GetProcessOutput(SDL_ProcessHandle handle, void* buffer, size_t size);
int SDL_GetProcessProperties(SDL_ProcessHandle handle, SDL_ProcessProperties* properties);
SDL_PropertyType SDL_GetPropertyType(const char *name);
void SDL_GetRGB(Uint32 pixel, const SDL_PixelFormat *format, Uint8 *r, Uint8 *g, Uint8 *b);
void SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormat *format, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
SDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad *gamepad);
SDL_GamepadType SDL_GetRealGamepadTypeForID(SDL_JoystickID id);
SDL_bool SDL_GetRectAndLineIntersection(const SDL_Rect *rect, int x1, int y1, int x2, int y2, int *out_x1, int *out_y1, int *out_x2, int *out_y2);
SDL_bool SDL_GetRectAndLineIntersectionFloat(const SDL_FRect *rect, float x1, float y1, float x2, float y2, float *out_x1, float *out_y1, float *out_x2, float *out_y2);
SDL_bool SDL_GetRectEnclosingPoints(const SDL_Point *points, int count, const SDL_Rect *clip, SDL_Rect *result);
SDL_bool SDL_GetRectEnclosingPointsFloat(const SDL_FPoint *points, int count, const SDL_FRect *clip, SDL_FRect *result);
SDL_bool SDL_GetRectIntersection(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);
SDL_bool SDL_GetRectIntersectionFloat(const SDL_FRect *A, const SDL_FRect *B, SDL_FRect *result);
void SDL_GetRectUnion(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);
void SDL_GetRectUnionFloat(const SDL_FRect *A, const SDL_FRect *B, SDL_FRect *result);
Uint32 SDL_GetRelativeMouseState(int *x, int *y);
SDL_bool SDL_GetRenderClipRect(SDL_Renderer *renderer, SDL_Rect *rect);
void SDL_GetRenderColorScale(SDL_Renderer *renderer, Uint8 *r, Uint8 *g, Uint8 *b);
int SDL_GetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode *blendMode);
int SDL_GetRenderDrawColor(SDL_Renderer *renderer, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
int SDL_GetRenderDrawColorFloat(SDL_Renderer *renderer, float *r, float *g, float *b, float *a);
int SDL_GetRenderDriver(int index, SDL_RendererInfo *info);
SDL_bool SDL_GetRenderLogicalPresentation(SDL_Renderer *renderer, SDL_RenderLogicalPresentation *presentation);
SDL_bool SDL_GetRenderLogicalPresentationRect(SDL_Renderer *renderer, SDL_Rect *rect);
void* SDL_GetRenderMetalCommandEncoder(SDL_Renderer *renderer);
void* SDL_GetRenderMetalLayer(SDL_Renderer *renderer);
int SDL_GetRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);
SDL_bool SDL_GetRenderSafeArea(SDL_Renderer *renderer, SDL_Rect *rect);
int SDL_GetRenderScale(SDL_Renderer *renderer, float *scaleX, float *scaleY);
SDL_Texture* SDL_GetRenderTarget(SDL_Renderer *renderer);
SDL_bool SDL_GetRenderVSync(SDL_Renderer *renderer);
SDL_bool SDL_GetRenderViewport(SDL_Renderer *renderer, SDL_Rect *rect);
SDL_Window* SDL_GetRenderWindow(SDL_Renderer *renderer);
SDL_Renderer* SDL_GetRenderer(SDL_Window *window);
SDL_Renderer* SDL_GetRendererFromTexture(SDL_Texture *texture);
const char* SDL_GetRendererName(SDL_Renderer *renderer);
int SDL_GetRendererProperties(SDL_Renderer *renderer, SDL_RendererProperties *properties);
const char* SDL_GetRevision(void);
size_t SDL_GetSIMDAlignment(void);
SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);
SDL_Scancode SDL_GetScancodeFromName(const char *name);
const char* SDL_GetScancodeName(SDL_Scancode scancode);
Uint32 SDL_GetSemaphoreValue(SDL_sem *sem);
int SDL_GetSensorData(SDL_Sensor *sensor, float *data, int numValues);
SDL_Sensor* SDL_GetSensorFromID(SDL_SensorID id);
SDL_SensorID SDL_GetSensorID(int index);
const char* SDL_GetSensorName(SDL_Sensor *sensor);
const char* SDL_GetSensorNameForID(SDL_SensorID id);
Uint32 SDL_GetSensorNonPortableType(SDL_Sensor *sensor);
Uint32 SDL_GetSensorNonPortableTypeForID(SDL_SensorID id);
int SDL_GetSensorProperties(SDL_Sensor *sensor, SDL_SensorProperties *properties);
SDL_SensorType SDL_GetSensorType(SDL_Sensor *sensor);
SDL_SensorType SDL_GetSensorTypeForID(SDL_SensorID id);
int SDL_GetSensors(SDL_Sensor **sensors, int maxSensors);
Uint8 SDL_GetSilenceValueForFormat(SDL_AudioFormat format);
Uint64 SDL_GetStorageFileSize(const char *path);
int SDL_GetStoragePathInfo(const char *path, SDL_StoragePathInfo *info);
Uint64 SDL_GetStorageSpaceRemaining(const char *path);
const char* SDL_GetStringProperty(const char *name);
int SDL_GetSurfaceAlphaMod(SDL_Surface *surface, Uint8 *alpha);
int SDL_GetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode *blendMode);
SDL_bool SDL_GetSurfaceClipRect(SDL_Surface *surface, SDL_Rect *rect);
int SDL_GetSurfaceColorKey(SDL_Surface *surface, Uint32 *key);
int SDL_GetSurfaceColorMod(SDL_Surface *surface, Uint8 *r, Uint8 *g, Uint8 *b);
SDL_Colorspace SDL_GetSurfaceColorspace(SDL_Surface *surface);
int SDL_GetSurfaceImages(SDL_Surface *surface, SDL_SurfaceImages *images);
SDL_Palette* SDL_GetSurfacePalette(SDL_Surface *surface);
int SDL_GetSurfaceProperties(SDL_Surface *surface, SDL_SurfaceProperties *properties);
int SDL_GetSystemRAM(void);
SDL_SystemTheme SDL_GetSystemTheme(void);
void* SDL_GetTLS(SDL_TLSID id);
SDL_bool SDL_GetTextInputArea(SDL_Rect *rect);
int SDL_GetTextureAlphaMod(SDL_Texture *texture, Uint8 *alpha);
int SDL_GetTextureAlphaModFloat(SDL_Texture *texture, float *alpha);
int SDL_GetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode *blendMode);
int SDL_GetTextureColorMod(SDL_Texture *texture, Uint8 *r, Uint8 *g, Uint8 *b);
int SDL_GetTextureColorModFloat(SDL_Texture *texture, float *r, float *g, float *b);
int SDL_GetTextureProperties(SDL_Texture *texture, SDL_TextureProperties *properties);
SDL_TextureScaleMode SDL_GetTextureScaleMode(SDL_Texture *texture);
int SDL_GetTextureSize(SDL_Texture *texture, int *w, int *h);
SDL_threadID SDL_GetThreadID(SDL_Thread *thread);
const char* SDL_GetThreadName(SDL_Thread *thread);
Uint32 SDL_GetTicks(void);
Uint64 SDL_GetTicksNS(void);
const char* SDL_GetTouchDeviceName(SDL_TouchID touchID);
SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);
int SDL_GetTouchDevices(SDL_TouchID *touchIDs, int maxDevices);
int SDL_GetTouchFingers(SDL_TouchID touchID, SDL_Finger **fingers, int maxFingers);
const char* SDL_GetUserFolder(void);
void SDL_GetVersion(SDL_version *ver);
const char* SDL_GetVideoDriver(int index);
float SDL_GetWindowAspectRatio(SDL_Window *window);
int SDL_GetWindowBordersSize(SDL_Window *window, int *top, int *left, int *bottom, int *right);
float SDL_GetWindowDisplayScale(SDL_Window *window);
Uint32 SDL_GetWindowFlags(SDL_Window *window);
SDL_Window* SDL_GetWindowFromEvent(SDL_Event *event);
SDL_Window* SDL_GetWindowFromID(Uint32 id);
int SDL_GetWindowFullscreenMode(SDL_Window *window, SDL_DisplayMode *mode);
int SDL_GetWindowICCProfile(SDL_Window *window, void **icc_profile);
Uint32 SDL_GetWindowID(SDL_Window *window);
SDL_bool SDL_GetWindowKeyboardGrab(SDL_Window *window);
void SDL_GetWindowMaximumSize(SDL_Window *window, int *w, int *h);
void SDL_GetWindowMinimumSize(SDL_Window *window, int *w, int *h);
SDL_bool SDL_GetWindowMouseGrab(SDL_Window *window);
SDL_bool SDL_GetWindowMouseRect(SDL_Window *window, SDL_Rect *rect);
float SDL_GetWindowOpacity(SDL_Window *window);
SDL_Window* SDL_GetWindowParent(SDL_Window *window);
float SDL_GetWindowPixelDensity(SDL_Window *window);
Uint32 SDL_GetWindowPixelFormat(SDL_Window *window);
void SDL_GetWindowPosition(SDL_Window *window, int *x, int *y);
int SDL_GetWindowProperties(SDL_Window *window, SDL_WindowProperties *properties);
SDL_bool SDL_GetWindowRelativeMouseMode(SDL_Window *window);
SDL_bool SDL_GetWindowSafeArea(SDL_Window *window, SDL_Rect *rect);
void SDL_GetWindowSize(SDL_Window *window, int *w, int *h);
void SDL_GetWindowSizeInPixels(SDL_Window *window, int *w, int *h);
SDL_Surface* SDL_GetWindowSurface(SDL_Window *window);
SDL_bool SDL_GetWindowSurfaceVSync(SDL_Window *window);
const char* SDL_GetWindowTitle(SDL_Window *window);
int SDL_GetWindows(SDL_Window **windows, int maxWindows);
int SDL_GlobDirectory(const char *pattern, SDL_Glob **glob);
int SDL_GlobStorageDirectory(const char *pattern, SDL_Glob **glob);
SDL_bool SDL_HapticEffectSupported(SDL_Haptic *haptic, SDL_HapticEffect *effect);
SDL_bool SDL_HapticRumbleSupported(SDL_Haptic *haptic);
SDL_bool SDL_HasARMSIMD(void);
SDL_bool SDL_HasAVX2(void);
SDL_bool SDL_HasAVX512F(void);
SDL_bool SDL_HasAVX(void);
SDL_bool SDL_HasAltiVec(void);
SDL_bool SDL_HasClipboardData(const char *mime_type);
SDL_bool SDL_HasClipboardText(void);
SDL_bool SDL_HasEvent(Uint32 type);
SDL_bool SDL_HasEvents(Uint32 minType, Uint32 maxType);
SDL_bool SDL_HasGamepad(SDL_GamepadID id);
SDL_bool SDL_HasJoystick(SDL_JoystickID id);
SDL_bool SDL_HasKeyboard(void);
SDL_bool SDL_HasLASX(void);
SDL_bool SDL_HasLSX(void);
SDL_bool SDL_HasMMX(void);
SDL_bool SDL_HasMouse(void);
SDL_bool SDL_HasNEON(void);
SDL_bool SDL_HasPrimarySelectionText(void);
SDL_bool SDL_HasProperty(const char *name);
SDL_bool SDL_HasRectIntersection(const SDL_Rect *A, const SDL_Rect *B);
SDL_bool SDL_HasRectIntersectionFloat(const SDL_FRect *A, const SDL_FRect *B);
SDL_bool SDL_HasSSE2(void);
SDL_bool SDL_HasSSE3(void);
SDL_bool SDL_HasSSE41(void);
SDL_bool SDL_HasSSE42(void);
SDL_bool SDL_HasSSE(void);
SDL_bool SDL_HasScreenKeyboardSupport(void);
int SDL_HideCursor(void);
int SDL_HideWindow(SDL_Window *window);
SDL_RWops* SDL_IOFromConstMem(const void *mem, int size);
SDL_RWops* SDL_IOFromDynamicMem(void *mem, int size);
SDL_RWops* SDL_IOFromFile(const char *file, const char *mode);
SDL_RWops* SDL_IOFromMem(void *mem, int size);
int SDL_IOvprintf(SDL_RWops *context, const char *fmt, va_list ap);
bool SDL_Init(SDL_InitFlags flags);
bool SDL_InitHapticRumble(SDL_Haptic *haptic);
bool SDL_InitSubSystem(SDL_InitFlags flags);
SDL_bool SDL_IsGamepad(SDL_JoystickID id);
SDL_bool SDL_IsJoystickHaptic(SDL_Joystick *joystick);
SDL_bool SDL_IsJoystickVirtual(SDL_Joystick *joystick);
SDL_bool SDL_IsMouseHaptic(SDL_Cursor *cursor);
SDL_bool SDL_IsTV(void);
SDL_bool SDL_IsTablet(void);
SDL_bool SDL_JoystickConnected(SDL_JoystickID id);
SDL_bool SDL_JoystickEventsEnabled(void);
int SDL_KillProcess(Uint32 pid);
SDL_Surface* SDL_LoadBMP(const char *file);
SDL_Surface* SDL_LoadBMP_IO(SDL_RWops *src, int freesrc);
void* SDL_LoadFile(const char *file, size_t *datasize);
void* SDL_LoadFile_IO(SDL_RWops *src, size_t *datasize, int freesrc);
void* SDL_LoadFunction(void *handle, const char *name);
void* SDL_LoadObject(const char *sofile);
Uint8* SDL_LoadWAV(const char *file, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
Uint8* SDL_LoadWAV_IO(SDL_RWops *src, int freesrc, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
int SDL_LockAudioStream(SDL_AudioStream *stream);
void SDL_LockJoysticks(void);
int SDL_LockMutex(SDL_mutex *mutex);
int SDL_LockProperties(SDL_Properties *properties);
int SDL_LockRWLockForReading(SDL_RWLock *rwlock);
int SDL_LockRWLockForWriting(SDL_RWLock *rwlock);
void SDL_LockSpinlock(SDL_SpinLock *spinlock);
int SDL_LockSurface(SDL_Surface *surface);
int SDL_LockTexture(SDL_Texture *texture, const SDL_Rect *rect, void **pixels, int *pitch);
int SDL_LockTextureToSurface(SDL_Texture *texture, const SDL_Rect *rect, SDL_Surface **surface);
void SDL_LogMessageV(int category, SDL_LogPriority priority, const char *fmt, va_list ap);
Uint32 SDL_MapRGB(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b);
Uint32 SDL_MapRGBA(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
Uint32 SDL_MapSurfaceRGB(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);
Uint32 SDL_MapSurfaceRGBA(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
int SDL_MaximizeWindow(SDL_Window *window);
void SDL_MemoryBarrierAcquireFunction(void);
void SDL_MemoryBarrierReleaseFunction(void);
SDL_MetalView SDL_Metal_CreateView(SDL_Window *window);
void SDL_Metal_DestroyView(SDL_MetalView view);
void* SDL_Metal_GetLayer(SDL_MetalView view);
int SDL_MinimizeWindow(SDL_Window *window);
void SDL_MixAudio(Uint8 *dst, const Uint8 *src, Uint32 len, int volume);
void SDL_OnApplicationDidChangeStatusBarOrientation(void);
void SDL_OnApplicationDidEnterBackground(void);
void SDL_OnApplicationDidEnterForeground(void);
void SDL_OnApplicationDidReceiveMemoryWarning(void);
void SDL_OnApplicationWillEnterBackground(void);
void SDL_OnApplicationWillEnterForeground(void);
void SDL_OnApplicationWillTerminate(void);
SDL_AudioDeviceID SDL_OpenAudioDevice(const char *device, int iscapture, const SDL_AudioSpec *desired, SDL_AudioSpec *obtained, int allowed_changes);
SDL_AudioStream* SDL_OpenAudioDeviceStream(const char *device, int iscapture, const SDL_AudioSpec *desired, const SDL_AudioSpec *obtained, int allowed_changes);
SDL_Camera* SDL_OpenCamera(int index, const SDL_CameraConfig *config);
SDL_RWops* SDL_OpenFileStorage(const char *path, const char *mode);
SDL_Gamepad* SDL_OpenGamepad(SDL_JoystickID id);
SDL_Haptic* SDL_OpenHaptic(int device_index);
SDL_Haptic* SDL_OpenHapticFromJoystick(SDL_Joystick *joystick);
SDL_Haptic* SDL_OpenHapticFromMouse(void);
SDL_RWops* SDL_OpenIO(const char *path, const char *mode);
SDL_Joystick* SDL_OpenJoystick(SDL_JoystickID id);
SDL_Sensor* SDL_OpenSensor(SDL_SensorID id);
SDL_RWops* SDL_OpenStorage(const char *path, const char *mode);
SDL_RWops* SDL_OpenTitleStorage(const char *title, const char *mode);
int SDL_OpenURL(const char *url);
SDL_RWops* SDL_OpenUserStorage(const char *path, const char *mode);
void SDL_OutOfMemory(void);
void SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on);
void SDL_PauseAudioStreamDevice(SDL_AudioStream *stream, int pause_on);
int SDL_PauseHaptic(SDL_Haptic *haptic);
int SDL_PeepEvents(SDL_Event *events, int numevents, SDL_eventaction action, Uint32 minType, Uint32 maxType);
int SDL_PlayHapticRumble(SDL_Haptic *haptic, float strength, Uint32 length);
int SDL_PollEvent(SDL_Event *event);
Uint32 SDL_PremultiplyAlpha(Uint32 src, SDL_PixelFormat *fmt);
int SDL_PremultiplySurfaceAlpha(SDL_Surface *surface);
void SDL_PumpEvents(void);
int SDL_PushEvent(SDL_Event *event);
int SDL_PutAudioStreamData(SDL_AudioStream *stream, const void *data, int len);
void SDL_Quit(void);
void SDL_QuitSubSystem(SDL_InitFlags flags);
void SDL_RaiseWindow(SDL_Window *window);
size_t SDL_ReadIO(SDL_RWops *context, void *ptr, size_t size, size_t maxnum);
int SDL_ReadProcess(SDL_Process *process, void *buffer, size_t size);
Sint16 SDL_ReadS16BE(SDL_RWops *context);
Sint16 SDL_ReadS16LE(SDL_RWops *context);
Sint32 SDL_ReadS32BE(SDL_RWops *context);
Sint32 SDL_ReadS32LE(SDL_RWops *context);
Sint64 SDL_ReadS64BE(SDL_RWops *context);
Sint64 SDL_ReadS64LE(SDL_RWops *context);
Sint8 SDL_ReadS8(SDL_RWops *context);
int SDL_ReadStorageFile(const char *path, void *buffer, size_t size);
Uint32 SDL_ReadSurfacePixel(SDL_Surface *surface, int x, int y);
float SDL_ReadSurfacePixelFloat(SDL_Surface *surface, int x, int y, int channel);
Uint16 SDL_ReadU16BE(SDL_RWops *context);
Uint16 SDL_ReadU16LE(SDL_RWops *context);
Uint32 SDL_ReadU32BE(SDL_RWops *context);
Uint32 SDL_ReadU32LE(SDL_RWops *context);
Uint64 SDL_ReadU64BE(SDL_RWops *context);
Uint64 SDL_ReadU64LE(SDL_RWops *context);
Uint8 SDL_ReadU8(SDL_RWops *context);
Uint32 SDL_RegisterEvents(int numevents);
int SDL_ReleaseCameraFrame(SDL_Camera *camera, void *frame);
int SDL_ReloadGamepadMappings(const char *mappingFile);
void SDL_RemoveEventWatch(SDL_EventFilter filter, void *userdata);
void SDL_RemoveHintCallback(const char *name, SDL_HintCallback callback, void *userdata);
int SDL_RemovePath(const char *path);
int SDL_RemoveStoragePath(const char *path);
int SDL_RemoveSurfaceAlternateImages(SDL_Surface *surface);
SDL_TimerID SDL_RemoveTimer(SDL_TimerID id);
int SDL_RenamePath(const char *oldpath, const char *newpath);
int SDL_RenameStoragePath(const char *oldpath, const char *newpath);
int SDL_RenderClear(SDL_Renderer *renderer);
SDL_bool SDL_RenderClipEnabled(SDL_Renderer *renderer);
int SDL_RenderCoordinatesFromWindow(SDL_Renderer *renderer, SDL_Window *window, int x, int y, int *out_x, int *out_y);
int SDL_RenderCoordinatesToWindow(SDL_Renderer *renderer, SDL_Window *window, int x, int y, int *out_x, int *out_y);
int SDL_RenderFillRect(SDL_Renderer *renderer, const SDL_Rect *rect);
int SDL_RenderFillRects(SDL_Renderer *renderer, const SDL_Rect *rects, int count);
int SDL_RenderGeometry(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_Vertex *vertices, int num_vertices, const int *indices, int num_indices);
bool SDL_RenderGeometryRaw(SDL_Renderer *renderer, SDL_Texture *texture, const float *xy, int xy_stride, const SDL_FColor *color, int color_stride, const float *uv, int uv_stride, int num_vertices, const void *indices, int num_indices, int size_indices);
bool SDL_RenderLine(SDL_Renderer *renderer, float x1, float y1, float x2, float y2);
bool SDL_RenderLines(SDL_Renderer *renderer, const SDL_FPoint *points, int count);
bool SDL_RenderPoint(SDL_Renderer *renderer, float x, float y);
bool SDL_RenderPoints(SDL_Renderer *renderer, const SDL_FPoint *points, int count);
bool SDL_RenderPresent(SDL_Renderer *renderer);
SDL_Surface* SDL_RenderReadPixels(SDL_Renderer *renderer, const SDL_Rect *rect);
bool SDL_RenderRect(SDL_Renderer *renderer, const SDL_FRect *rect);
bool SDL_RenderRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);
bool SDL_RenderTexture9Grid(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect *dstrect);
bool SDL_RenderTexture(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FRect *dstrect);
bool SDL_RenderTextureRotated(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FRect *dstrect, double angle, const SDL_FPoint *center, SDL_FlipMode flip);
bool SDL_RenderTextureTiled(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float scale, const SDL_FRect *dstrect);
bool SDL_RenderViewportSet(SDL_Renderer *renderer);
SDL_AssertState SDL_ReportAssertion(SDL_AssertData *data, const char *func, const char *file, int line);
void SDL_ResetAssertionReport(void);
bool SDL_ResetHint(const char *name);
void SDL_ResetHints(void);
void SDL_ResetKeyboard(void);
void SDL_ResetLogPriorities(void);
bool SDL_RestoreWindow(SDL_Window *window);
bool SDL_ResumeAudioDevice(SDL_AudioDeviceID dev);
bool SDL_ResumeAudioStreamDevice(SDL_AudioStream *stream);
bool SDL_ResumeHaptic(SDL_Haptic *haptic);
bool SDL_RumbleGamepad(SDL_Gamepad *gamepad, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
bool SDL_RumbleGamepadTriggers(SDL_Gamepad *gamepad, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
bool SDL_RumbleJoystick(SDL_Joystick *joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);
bool SDL_RumbleJoystickTriggers(SDL_Joystick *joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);
bool SDL_RunHapticEffect(SDL_Haptic *haptic, int effect, Uint32 iterations);
int SDL_RunApp(int argc, char *argv[], SDL_main_func mainFunction, void *reserved);
bool SDL_SaveBMP(SDL_Surface *surface, const char *file);
bool SDL_SaveBMP_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);
SDL_Surface* SDL_ScaleSurface(SDL_Surface *surface, int width, int height, SDL_ScaleMode scaleMode);
bool SDL_ScreenKeyboardShown(SDL_Window *window);
bool SDL_ScreenSaverEnabled(void);
Sint64 SDL_SeekIO(SDL_IOStream *context, Sint64 offset, SDL_IOWhence whence);
bool SDL_SendGamepadEffect(SDL_Gamepad *gamepad, const void *data, int size);
bool SDL_SendJoystickEffect(SDL_Joystick *joystick, const void *data, int size);
bool SDL_SendJoystickVirtualSensorData(SDL_Joystick *joystick, SDL_SensorType type, Uint64 sensor_timestamp, const float *data, int num_values);
bool SDL_SetAppMetadata(const char *appname, const char *appversion, const char *appidentifier);
bool SDL_SetAppMetadataProperty(const char *name, const char *value);
void SDL_SetAssertionHandler(SDL_AssertionHandler handler, void *userdata);
int SDL_SetAtomicInt(SDL_AtomicInt *a, int v);
void* SDL_SetAtomicPointer(void **a, void *v);
Uint32 SDL_SetAtomicU32(SDL_AtomicU32 *a, Uint32 v);
bool SDL_SetAudioDeviceGain(SDL_AudioDeviceID devid, float gain);
bool SDL_SetAudioPostmixCallback(SDL_AudioDeviceID devid, SDL_AudioPostmixCallback callback, void *userdata);
bool SDL_SetAudioStreamFormat(SDL_AudioStream *stream, const SDL_AudioSpec *src_spec, const SDL_AudioSpec *dst_spec);
bool SDL_SetAudioStreamFrequencyRatio(SDL_AudioStream *stream, float ratio);
bool SDL_SetAudioStreamGain(SDL_AudioStream *stream, float gain);
bool SDL_SetAudioStreamGetCallback(SDL_AudioStream *stream, SDL_AudioStreamCallback callback, void *userdata);
bool SDL_SetAudioStreamInputChannelMap(SDL_AudioStream *stream, const int *chmap, int count);
bool SDL_SetAudioStreamOutputChannelMap(SDL_AudioStream *stream, const int *chmap, int count);
bool SDL_SetAudioStreamPutCallback(SDL_AudioStream *stream, SDL_AudioStreamCallback callback, void *userdata);
bool SDL_SetBooleanProperty(SDL_PropertiesID props, const char *name, bool value);
bool SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, void *userdata, const char **mime_types, size_t num_mime_types);
bool SDL_SetClipboardText(const char *text);
bool SDL_SetCurrentThreadPriority(SDL_ThreadPriority priority);
bool SDL_SetCursor(SDL_Cursor *cursor);
bool SDL_SetEnvironmentVariable(SDL_Environment *env, const char *name, const char *value, bool overwrite);
void SDL_SetEventEnabled(Uint32 type, bool enabled);
void SDL_SetEventFilter(SDL_EventFilter filter, void *userdata);
bool SDL_SetFloatProperty(SDL_PropertiesID props, const char *name, float value);
void SDL_SetGamepadEventsEnabled(SDL_bool enabled);
int SDL_SetGamepadLED(SDL_Gamepad *gamepad, Uint8 red, Uint8 green, Uint8 blue);
int SDL_SetGamepadMapping(const char *mappingString);
void SDL_SetGamepadPlayerIndex(SDL_Gamepad *gamepad, int playerIndex);
int SDL_SetGamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type, SDL_bool enabled);
int SDL_SetHapticAutocenter(SDL_Haptic *haptic, int autocenter);
int SDL_SetHapticGain(SDL_Haptic *haptic, int gain);
SDL_bool SDL_SetHint(const char *name, const char *value);
SDL_bool SDL_SetHintWithPriority(const char *name, const char *value, SDL_HintPriority priority);
void SDL_SetInitialized(SDL_bool initialized);
void SDL_SetJoystickEventsEnabled(SDL_bool enabled);
int SDL_SetJoystickLED(SDL_Joystick *joystick, Uint8 red, Uint8 green, Uint8 blue);
void SDL_SetJoystickPlayerIndex(SDL_Joystick *joystick, int playerIndex);
int SDL_SetJoystickVirtualAxis(SDL_Joystick *joystick, int axis, Sint16 value);
int SDL_SetJoystickVirtualBall(SDL_Joystick *joystick, int ball, Sint16 xrel, Sint16 yrel);
int SDL_SetJoystickVirtualButton(SDL_Joystick *joystick, int button, Uint8 state);
int SDL_SetJoystickVirtualHat(SDL_Joystick *joystick, int hat, Uint8 value);
int SDL_SetJoystickVirtualTouchpad(SDL_Joystick *joystick, int touchpad, int finger, float x, float y, float pressure);
void SDL_SetLogOutputFunction(SDL_LogOutputFunction callback, void *userdata);
void SDL_SetLogPriorities(const SDL_LogPriority *priorities, int count);
void SDL_SetLogPriority(int category, SDL_LogPriority priority);
void SDL_SetLogPriorityPrefix(const char *prefix, SDL_LogPriority priority);
void SDL_SetMainReady(void);
void SDL_SetMemoryFunctions(void *(*malloc_func)(size_t), void *(*calloc_func)(size_t, size_t), void *(*realloc_func)(void *, size_t), void (*free_func)(void *));
void SDL_SetModState(SDL_Keymod modstate);
int SDL_SetNumberProperty(const char *property, double value);
int SDL_SetPaletteColors(SDL_Palette *palette, const SDL_Color *colors, int firstcolor, int ncolors);
int SDL_SetPointerProperty(const char *property, void *value);
int SDL_SetPointerPropertyWithCleanup(const char *property, void *value, SDL_PropertyCleanup cleanup, void *userdata);
int SDL_SetPrimarySelectionText(const char *text);
int SDL_SetRenderClipRect(SDL_Renderer *renderer, const SDL_Rect *rect);
int SDL_SetRenderColorScale(SDL_Renderer *renderer, float rscale, float gscale, float bscale, float ascale);
int SDL_SetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode blendMode);
int SDL_SetRenderDrawColor(SDL_Renderer *renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
int SDL_SetRenderDrawColorFloat(SDL_Renderer *renderer, float r, float g, float b, float a);
int SDL_SetRenderLogicalPresentation(SDL_Renderer *renderer, int w, int h, SDL_RenderLogicalPresentation presentation, SDL_ScaleMode scaleMode);
int SDL_SetRenderScale(SDL_Renderer *renderer, float scaleX, float scaleY);
int SDL_SetRenderTarget(SDL_Renderer *renderer, SDL_Texture *texture);
int SDL_SetRenderVSync(SDL_Renderer *renderer, int interval);
int SDL_SetRenderViewport(SDL_Renderer *renderer, const SDL_Rect *rect);
int SDL_SetScancodeName(SDL_Scancode scancode, const char *name);
int SDL_SetStringProperty(const char *property, const char *value);
int SDL_SetSurfaceAlphaMod(SDL_Surface *surface, Uint8 alpha);
int SDL_SetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode blendMode);
SDL_bool SDL_SetSurfaceClipRect(SDL_Surface *surface, const SDL_Rect *rect);
int SDL_SetSurfaceColorKey(SDL_Surface *surface, SDL_bool flag, Uint32 key);
int SDL_SetSurfaceColorMod(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);
int SDL_SetSurfaceColorspace(SDL_Surface *surface, SDL_PixelFormatEnum colorspace);
int SDL_SetSurfacePalette(SDL_Surface *surface, SDL_Palette *palette);
int SDL_SetSurfaceRLE(SDL_Surface *surface, int flag);
int SDL_SetTLS(SDL_TLSID id, void *value, void (*destructor)(void *));
int SDL_SetTextInputArea(SDL_Window *window, const SDL_Rect *rect);
int SDL_SetTextureAlphaMod(SDL_Texture *texture, Uint8 alpha);
int SDL_SetTextureAlphaModFloat(SDL_Texture *texture, float alpha);
int SDL_SetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode blendMode);
int SDL_SetTextureColorMod(SDL_Texture *texture, Uint8 r, Uint8 g, Uint8 b);
int SDL_SetTextureColorModFloat(SDL_Texture *texture, float r, float g, float b);
int SDL_SetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode scaleMode);
int SDL_SetWindowAlwaysOnTop(SDL_Window *window, SDL_bool on_top);
int SDL_SetWindowAspectRatio(SDL_Window *window, int aspect_x, int aspect_y);
void SDL_SetWindowBordered(SDL_Window *window, SDL_bool bordered);
void SDL_SetWindowFocusable(SDL_Window *window, SDL_bool focusable);
int SDL_SetWindowFullscreen(SDL_Window *window, Uint32 flags);
int SDL_SetWindowFullscreenMode(SDL_Window *window, const SDL_DisplayMode *mode);
int SDL_SetWindowHitTest(SDL_Window *window, SDL_HitTest callback, void *callback_data);
void SDL_SetWindowIcon(SDL_Window *window, SDL_Surface *icon);
void SDL_SetWindowKeyboardGrab(SDL_Window *window, SDL_bool grabbed);
void SDL_SetWindowMaximumSize(SDL_Window *window, int max_w, int max_h);
void SDL_SetWindowMinimumSize(SDL_Window *window, int min_w, int min_h);
int SDL_SetWindowModal(SDL_Window *parent, SDL_Window *modal_window);
void SDL_SetWindowMouseGrab(SDL_Window *window, SDL_bool grabbed);
int SDL_SetWindowMouseRect(SDL_Window *window, const SDL_Rect *rect);
int SDL_SetWindowOpacity(SDL_Window *window, float opacity);
int SDL_SetWindowParent(SDL_Window *child, SDL_Window *parent);
void SDL_SetWindowPosition(SDL_Window *window, int x, int y);
int SDL_SetWindowRelativeMouseMode(SDL_Window *window, SDL_bool enabled);
void SDL_SetWindowResizable(SDL_Window *window, SDL_bool resizable);
int SDL_SetWindowShape(SDL_Window *window, SDL_Surface *shape, const SDL_WindowShapeMode *shape_mode);
void SDL_SetWindowSize(SDL_Window *window, int w, int h);
int SDL_SetWindowSurfaceVSync(SDL_Window *window, int interval);
void SDL_SetWindowTitle(SDL_Window *window, const char *title);
SDL_bool SDL_ShouldInit(const char *subsystem);
SDL_bool SDL_ShouldQuit(void);
int SDL_ShowCursor(int toggle);
int SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
int SDL_ShowOpenFileDialog(const SDL_FileDialogData *dialogdata, char **selection);
int SDL_ShowOpenFolderDialog(const SDL_FolderDialogData *dialogdata, char **selection);
int SDL_ShowSaveFileDialog(const SDL_FileDialogData *dialogdata, char **selection);
int SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *message, SDL_Window *window);
void SDL_ShowWindow(SDL_Window *window);
int SDL_ShowWindowSystemMenu(SDL_Window *window);
void SDL_SignalCondition(SDL_Condition *cond);
void SDL_SignalSemaphore(SDL_Semaphore *sem);
void SDL_StartTextInput(void);
void SDL_StartTextInputWithProperties(const char *hintRect, const char *hintLocale);
size_t SDL_StepUTF8(const char *str, SDL_bool *error);
int SDL_StopHapticEffect(SDL_Haptic *haptic, int effect);
void SDL_StopHapticEffects(SDL_Haptic *haptic);
int SDL_StopHapticRumble(SDL_Haptic *haptic);
void SDL_StopTextInput(void);
SDL_bool SDL_StorageReady(void);
SDL_GUID SDL_StringToGUID(const char *str);
SDL_bool SDL_SurfaceHasAlternateImages(const SDL_Surface *surface);
SDL_bool SDL_SurfaceHasColorKey(const SDL_Surface *surface);
SDL_bool SDL_SurfaceHasRLE(const SDL_Surface *surface);
void SDL_SyncWindow(SDL_Window *window);
Sint64 SDL_TellIO(SDL_RWops *context);
SDL_bool SDL_TextInputActive(void);
Uint64 SDL_TimeFromWindows(Uint64 winTime);
Uint64 SDL_TimeToDateTime(Uint64 unixTime);
Uint64 SDL_TimeToWindows(Uint64 unixTime);
int SDL_TryLockMutex(SDL_mutex *mutex);
int SDL_TryLockRWLockForReading(SDL_RWLock *rwlock);
int SDL_TryLockRWLockForWriting(SDL_RWLock *rwlock);
int SDL_TryLockSpinlock(SDL_SpinLock *spinlock);
int SDL_TryWaitSemaphore(SDL_semaphore *sem);
int SDL_UCS4ToUTF8(Uint32 ucs4, char *utf8, size_t utf8_len);
int SDL_UnbindAudioStream(SDL_AudioStream *stream);
void SDL_UnbindAudioStreams(SDL_AudioStream * const *streams, int count);
void SDL_UnloadObject(void *handle);
int SDL_UnlockAudioStream(SDL_AudioStream *stream);
void SDL_UnlockJoysticks(void);
int SDL_UnlockMutex(SDL_mutex *mutex);
void SDL_UnlockProperties(void);
int SDL_UnlockRWLock(SDL_RWLock *rwlock);
int SDL_UnlockSpinlock(SDL_SpinLock *spinlock);
int SDL_UnlockSurface(SDL_Surface *surface);
int SDL_UnlockTexture(SDL_Texture *texture);
int SDL_UnsetEnvironmentVariable(const char *name);
void SDL_UpdateGamepads(void);
int SDL_UpdateHapticEffect(SDL_Haptic *haptic, int effect, SDL_HapticEffect *data);
void SDL_UpdateJoysticks(void);
int SDL_UpdateNVTexture(SDL_Texture *texture, const SDL_Rect *rect, const void *pixels, int pitch);
void SDL_UpdateSensors(void);
int SDL_UpdateTexture(SDL_Texture *texture, const SDL_Rect *rect, const void *pixels, int pitch);
int SDL_UpdateWindowSurface(SDL_Window *window);
int SDL_UpdateWindowSurfaceRects(SDL_Window *window, const SDL_Rect *rects, int numrects);
int SDL_UpdateYUVTexture(SDL_Texture *texture, const SDL_Rect *rect, const Uint8 *Yplane, int Ypitch, const Uint8 *Uplane, int Upitch, const Uint8 *Vplane, int Vpitch);
void SDL_WaitCondition(SDL_Condition *cond, SDL_Mutex *mutex);
bool SDL_WaitConditionTimeout(SDL_Condition *cond, SDL_Mutex *mutex, Sint32 timeoutMS);
bool SDL_WaitEvent(SDL_Event *event);
bool SDL_WaitEventTimeout(SDL_Event *event, Sint32 timeoutMS);
bool SDL_WaitProcess(SDL_Process *process, bool block, int *exitcode);
void SDL_WaitSemaphore(SDL_Semaphore *sem);
bool SDL_WaitSemaphoreTimeout(SDL_Semaphore *sem, Sint32 timeoutMS);
void SDL_WaitThread(SDL_Thread *thread, int *status);
bool SDL_WarpMouseGlobal(float x, float y);
void SDL_WarpMouseInWindow(SDL_Window * window, float x, float y);
SDL_InitFlags SDL_WasInit(SDL_InitFlags flags);
bool SDL_WindowHasSurface(SDL_Window *window);
size_t SDL_WriteIO(SDL_IOStream *context, const void *ptr, size_t size);
bool SDL_WriteS16BE(SDL_IOStream *dst, Sint16 value);
bool SDL_WriteS16LE(SDL_IOStream *dst, Sint16 value);
bool SDL_WriteS32BE(SDL_IOStream *dst, Sint32 value);
bool SDL_WriteS32LE(SDL_IOStream *dst, Sint32 value);
bool SDL_WriteS64BE(SDL_IOStream *dst, Sint64 value);
bool SDL_WriteS64LE(SDL_IOStream *dst, Sint64 value);
int SDL_WriteS8(SDL_RWops* context, Sint8 value);
int SDL_WriteStorageFile(const char* file_path, const void* data, size_t size);
int SDL_WriteSurfacePixel(SDL_Surface* surface, int x, int y, Uint32 pixel);
int SDL_WriteSurfacePixelFloat(SDL_Surface* surface, int x, int y, float pixel);
int SDL_WriteU16BE(SDL_RWops* context, Uint16 value);
int SDL_WriteU16LE(SDL_RWops* context, Uint16 value);
int SDL_WriteU32BE(SDL_RWops* context, Uint32 value);
int SDL_WriteU32LE(SDL_RWops* context, Uint32 value);
int SDL_WriteU64BE(SDL_RWops* context, Uint64 value);
int SDL_WriteU64LE(SDL_RWops* context, Uint64 value);
int SDL_WriteU8(SDL_RWops* context, Uint8 value);
int SDL_abs(int x);
double SDL_acos(double x);
float SDL_acosf(float x);
void* SDL_aligned_alloc(size_t alignment, size_t size);
void SDL_aligned_free(void* memblock);
double SDL_asin(double x);
float SDL_asinf(float x);
double SDL_atan2(double y, double x);
float SDL_atan2f(float y, float x);
double SDL_atan(double x);
float SDL_atanf(float x);
double SDL_atof(const char* str);
int SDL_atoi(const char* str);
void* SDL_bsearch(const void* key, const void* base, size_t nmemb, size_t size, int (*compar)(const void*, const void*));
void* SDL_bsearch_r(const void* key, const void* base, size_t nmemb, size_t size, int (*compar)(const void*, const void*, void*), void* arg);
void* SDL_calloc(size_t nmemb, size_t size);
double SDL_ceil(double x);
float SDL_ceilf(float x);
double SDL_copysign(double x, double y);
float SDL_copysignf(float x, float y);
double SDL_cos(double x);
float SDL_cosf(float x);
Uint16 SDL_crc16(const void* data, size_t length);
Uint32 SDL_crc32(const void* data, size_t length);
double SDL_exp(double x);
float SDL_expf(float x);
double SDL_fabs(double x);
float SDL_fabsf(float x);
double SDL_floor(double x);
float SDL_floorf(float x);
double SDL_fmod(double x, double y);
float SDL_fmodf(float x, float y);
void SDL_free(void* memblock);
char* SDL_getenv(const char* name);
char* SDL_getenv_unsafe(const char* name);
int SDL_hid_ble_scan(int enable);
void SDL_hid_close(SDL_hid_device* device);
int SDL_hid_device_change_count(void);
SDL_hid_device_info* SDL_hid_enumerate(unsigned short vendor_id, unsigned short product_id);
void SDL_hid_exit(void);
void SDL_hid_free_enumeration(SDL_hid_device_info* devs);
int SDL_hid_get_device_info(SDL_hid_device* device, SDL_hid_device_info* info);
int SDL_hid_get_feature_report(SDL_hid_device* device, unsigned char* data, size_t length);
int SDL_hid_get_indexed_string(SDL_hid_device* device, int string_index, wchar_t* string, size_t max_length);
int SDL_hid_get_input_report(SDL_hid_device* device, unsigned char* data, size_t length);
int SDL_hid_get_manufacturer_string(SDL_hid_device* device, wchar_t* string, size_t max_length);
int SDL_hid_get_product_string(SDL_hid_device* device, wchar_t* string, size_t max_length);
int SDL_hid_get_report_descriptor(SDL_hid_device* device, unsigned char* data, size_t length);
int SDL_hid_get_serial_number_string(SDL_hid_device* device, wchar_t* string, size_t max_length);
int SDL_hid_init(void);
SDL_hid_device* SDL_hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t* serial_number);
SDL_hid_device* SDL_hid_open_path(const char* path);
int SDL_hid_read(SDL_hid_device* device, unsigned char* data, size_t length);
int SDL_hid_read_timeout(SDL_hid_device* device, unsigned char* data, size_t length, int milliseconds);
int SDL_hid_send_feature_report(SDL_hid_device* device, const unsigned char* data, size_t length);
int SDL_hid_set_nonblocking(SDL_hid_device* device, int nonblock);
int SDL_hid_write(SDL_hid_device* device, const unsigned char* data, size_t length);
size_t SDL_iconv(SDL_iconv_t cd, const char** inbuf, size_t* inbytesleft, char** outbuf, size_t* outbytesleft);
int SDL_iconv_close(SDL_iconv_t cd);
SDL_iconv_t SDL_iconv_open(const char* tocode, const char* fromcode);
char* SDL_iconv_string(const char* tocode, const char* fromcode, const char* inbuf, size_t inbytesleft);
int SDL_isalnum(int c);
int SDL_isalpha(int c);
int SDL_isblank(int c);
int SDL_iscntrl(int c);
int SDL_isdigit(int c);
int SDL_isgraph(int c);
int SDL_isinf(double x);
int SDL_isinff(float x);
int SDL_islower(int c);
int SDL_isnan(double x);
int SDL_isnanf(float x);
int SDL_isprint(int c);
int SDL_ispunct(int c);
int SDL_isspace(int c);
int SDL_isupper(int c);
int SDL_isxdigit(int c);
char* SDL_itoa(int value, char* str, int radix);
char* SDL_lltoa(long long value, char* str, int radix);
double SDL_log10(double x);
float SDL_log10f(float x);
double SDL_log(double x);
float SDL_logf(float x);
long SDL_lround(double x);
long SDL_lroundf(float x);
char* SDL_ltoa(long value, char* str, int radix);
void * SDL_malloc(size_t size);
int SDL_memcmp(const void *s1, const void *s2, size_t len);
void * SDL_memcpy(void *dst, const void *src, size_t len);
void * SDL_memmove(void *dst, const void *src, size_t len);
void SDL_memset4(void* dst, Uint32 value, size_t dwords);
void* SDL_memset(void* dst, int value, size_t size);
double SDL_modf(double x, double* intpart);
float SDL_modff(float x, float* intpart);
Uint32 SDL_murmur3_32(const void* key, size_t len, Uint32 seed);
double SDL_pow(double base, double exp);
float SDL_powf(float base, float exp);
void SDL_qsort(void* base, size_t nmemb, size_t size, int (*compar)(const void*, const void*));
void SDL_qsort_r(void* base, size_t nmemb, size_t size, int (*compar)(const void*, const void*, void*), void* arg);
int SDL_rand(void);
Uint32 SDL_rand_bits(int bits);
Uint32 SDL_rand_bits_r(SDL_rand_state* state, int bits);
int SDL_rand_r(SDL_rand_state* state);
float SDL_randf(void);
float SDL_randf_r(SDL_rand_state* state);
void* SDL_realloc(void* ptr, size_t size);
double SDL_round(double x);
float SDL_roundf(float x);
double SDL_scalbn(double x, int n);
float SDL_scalbnf(float x, int n);
int SDL_setenv_unsafe(const char* name, const char* value, int overwrite);
double SDL_sin(double x);
float SDL_sinf(float x);
double SDL_sqrt(double x);
float SDL_sqrtf(float x);
void SDL_srand(unsigned int seed);
int SDL_strcasecmp(const char* str1, const char* str2);
char* SDL_strcasestr(const char* haystack, const char* needle);
char* SDL_strchr(const char* str, int c);
int SDL_strcmp(const char* str1, const char* str2);
char* SDL_strdup(const char* str);
size_t SDL_strlcat(char* dst, const char* src, size_t dstsize);
size_t SDL_strlcpy(char* dst, const char* src, size_t dstsize);
size_t SDL_strlen(const char* str);
char* SDL_strlwr(char* str);
int SDL_strncasecmp(const char* str1, const char* str2, size_t n);
int SDL_strncmp(const char* str1, const char* str2, size_t n);
char* SDL_strndup(const char* str, size_t n);
size_t SDL_strnlen(const char* str, size_t maxlen);
char* SDL_strnstr(const char* haystack, const char* needle, size_t len);
char* SDL_strpbrk(const char* str, const char* accept);
char* SDL_strrchr(const char* str, int c);
char* SDL_strrev(char* str);
char* SDL_strstr(const char* haystack, const char* needle);
double SDL_strtod(const char* str, char** endptr);
char* SDL_strtok_r(char* str, const char* delim, char** saveptr);
long SDL_strtol(const char* str, char** endptr, int base);
long long SDL_strtoll(const char* str, char** endptr, int base);
unsigned long SDL_strtoul(const char* str, char** endptr, int base);
unsigned long long SDL_strtoull(const char* str, char** endptr, int base);
char* SDL_strupr(char* str);
double SDL_tan(double x);
float SDL_tanf(float x);
int SDL_tolower(int x);
int SDL_toupper(int x);
double SDL_trunc(double x);
float SDL_truncf(float x);
char* SDL_uitoa(unsigned int value, char *str, int radix);
char* SDL_uitoa(unsigned int value, char *str, int radix);
char* SDL_ultoa(unsigned long value, char *str, int radix);
int SDL_unsetenv_unsafe(const char *name);
size_t SDL_utf8strlcpy(SDL_OUT_Z_CAP(dst_bytes) char *dst, const char *src, size_t dst_bytes);
size_t SDL_utf8strlen(const char *str);
size_t SDL_utf8strnlen(const char *str, size_t bytes);
int SDL_vasprintf(char **strp, const char *fmt, va_list ap);
int SDL_vsnprintf(char *text, size_t maxlen, const char *fmt, va_list ap);
int SDL_vsscanf(const char *text, const char *fmt, va_list ap);
int SDL_vswprintf(wchar_t *text, size_t maxlen, const wchar_t *fmt, va_list ap);
int SDL_wcscasecmp(const wchar_t *str1, const wchar_t *str2);
int SDL_wcscmp(const wchar_t *str1, const wchar_t *str2);
wchar_t* SDL_wcsdup(const wchar_t *wstr);
size_t SDL_wcslcat(wchar_t *dst, const wchar_t *src, size_t maxlen);
size_t SDL_wcslcpy(wchar_t *dst, const wchar_t *src, size_t maxlen);
size_t SDL_wcslen(const wchar_t *wstr);
int SDL_wcsncasecmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);
int SDL_wcsncmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);
size_t SDL_wcsnlen(const wchar_t *wstr, size_t maxlen);
wchar_t* SDL_wcsnstr(const wchar_t *haystack, const wchar_t *needle, size_t maxlen);
wchar_t* SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle);
long SDL_wcstol(const wchar_t *str, wchar_t **endp, int base);
Uint32 SDL_StepBackUTF8(const char *start, const char **pstr);
void SDL_DelayPrecise(Uint64 ns);
bool SDL_SetErrorV(const char *fmt, va_list ap)
SDL_LogOutputFunction SDL_GetDefaultLogOutputFunction(void);
bool SDL_RenderDebugText(SDL_Renderer *renderer, float x, float y, const char *str);
SDL_Sandbox SDL_GetSandbox(void);
bool SDL_SaveFile_IO(SDL_IOStream *src, const void *data, size_t datasize, bool closeio);
bool SDL_SaveFile(const char *file, const void *data, size_t datasize);
char* SDL_GetCurrentDirectory(void);
bool SDL_IsAudioDevicePhysical(SDL_AudioDeviceID devid);
bool SDL_IsAudioDevicePlayback(SDL_AudioDeviceID devid);
SDL_AsyncIO* SDL_AsyncIOFromFile(const char *file, const char *mode);
Sint64 SDL_GetAsyncIOSize(SDL_AsyncIO *asyncio);
bool SDL_ReadAsyncIO(SDL_AsyncIO *asyncio, void *ptr, Uint64 offset, Uint64 size, SDL_AsyncIOQueue *queue, void *userdata);
bool SDL_WriteAsyncIO(SDL_AsyncIO *asyncio, void *ptr, Uint64 offset, Uint64 size, SDL_AsyncIOQueue *queue, void *userdata);
bool SDL_CloseAsyncIO(SDL_AsyncIO *asyncio, bool flush, SDL_AsyncIOQueue *queue, void *userdata);
SDL_AsyncIOQueue* SDL_CreateAsyncIOQueue(void);
void SDL_DestroyAsyncIOQueue(SDL_AsyncIOQueue *queue);
bool SDL_GetAsyncIOResult(SDL_AsyncIOQueue *queue, SDL_AsyncIOOutcome *outcome);
bool SDL_WaitAsyncIOResult(SDL_AsyncIOQueue *queue, SDL_AsyncIOOutcome *outcome, Sint32 timeoutMS);
void SDL_SignalAsyncIOQueue(SDL_AsyncIOQueue *queue);
bool SDL_LoadFileAsync(const char *file, SDL_AsyncIOQueue *queue, void *userdata);
void SDL_ShowFileDialogWithProperties(SDL_FileDialogType type, SDL_DialogFileCallback callback, void *userdata, SDL_PropertiesID props);
bool SDL_IsMainThread(void);
bool SDL_RunOnMainThread(SDL_MainThreadCallback callback, void *userdata, bool wait_complete);
bool SDL_RenderTextureAffine(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FPoint *origin, const SDL_FPoint *right, const SDL_FPoint *down);
SDL_Tray* SDL_CreateTray(SDL_Surface *icon, const char *tooltip);
void SDL_SetTrayIcon(SDL_Tray *tray, SDL_Surface *icon);
void SDL_SetTrayTooltip(SDL_Tray *tray, const char *tooltip);
SDL_TrayMenu* SDL_CreateTrayMenu(SDL_Tray *tray);
SDL_TrayMenu* SDL_CreateTraySubmenu(SDL_TrayEntry *entry);
SDL_TrayMenu* SDL_GetTrayMenu(SDL_Tray *tray);
SDL_TrayMenu* SDL_GetTraySubmenu(SDL_TrayEntry *entry);
const SDL_TrayEntry ** SDL_GetTrayEntries(SDL_TrayMenu *menu, int *size);
void SDL_RemoveTrayEntry(SDL_TrayEntry *entry);
SDL_TrayEntry * SDL_InsertTrayEntryAt(SDL_TrayMenu *menu, int pos, const char *label, SDL_TrayEntryFlags flags);
void SDL_SetTrayEntryLabel(SDL_TrayEntry *entry, const char *label);
const char * SDL_GetTrayEntryLabel(SDL_TrayEntry *entry);
void SDL_SetTrayEntryChecked(SDL_TrayEntry *entry, bool checked);
bool SDL_GetTrayEntryChecked(SDL_TrayEntry *entry);
void SDL_SetTrayEntryEnabled(SDL_TrayEntry *entry, bool enabled);
bool SDL_GetTrayEntryEnabled(SDL_TrayEntry *entry);
void SDL_SetTrayEntryCallback(SDL_TrayEntry *entry, SDL_TrayCallback callback, void *userdata);
void SDL_DestroyTray(SDL_Tray *tray);
SDL_TrayMenu * SDL_GetTrayEntryParent(SDL_TrayEntry *entry);
SDL_TrayEntry * SDL_GetTrayMenuParentEntry(SDL_TrayMenu *menu);
SDL_Tray * SDL_GetTrayMenuParentTray(SDL_TrayMenu *menu);
SDL_ThreadState SDL_GetThreadState(SDL_Thread *thread);
bool SDL_AudioStreamDevicePaused(SDL_AudioStream *stream);
void SDL_ClickTrayEntry(SDL_TrayEntry *entry);
void SDL_UpdateTrays(void);
bool SDL_StretchSurface(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);


#endif
#endif
